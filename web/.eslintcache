[{"/Users/alexey/Documents/chat/web/src/index.js":"1","/Users/alexey/Documents/chat/web/src/route/appRouter.tsx":"2","/Users/alexey/Documents/chat/web/src/users/user.tsx":"3","/Users/alexey/Documents/chat/web/src/auth/query.ts":"4","/Users/alexey/Documents/chat/web/src/auth/register.tsx":"5","/Users/alexey/Documents/chat/web/src/auth/auth.tsx":"6","/Users/alexey/Documents/chat/web/src/chat/chat.tsx":"7","/Users/alexey/Documents/chat/web/src/chat/messageList.tsx":"8","/Users/alexey/Documents/chat/web/src/chat/query.ts":"9","/Users/alexey/Documents/chat/web/src/chat/sendMessage.tsx":"10","/Users/alexey/Documents/chat/web/src/ui/header.tsx":"11","/Users/alexey/Documents/chat/web/src/reportWebVitals.js":"12","/Users/alexey/Documents/chat/web/src/apolloSetup.ts":"13","/Users/alexey/Documents/chat/web/src/App.tsx":"14","/Users/alexey/Documents/chat/web/src/route/routes.ts":"15"},{"size":291,"mtime":1608201792826,"results":"16","hashOfConfig":"17"},{"size":829,"mtime":1608281788423,"results":"18","hashOfConfig":"17"},{"size":316,"mtime":1608216780141,"results":"19","hashOfConfig":"20"},{"size":339,"mtime":1608302953056,"results":"21","hashOfConfig":"17"},{"size":5810,"mtime":1608282424281,"results":"22","hashOfConfig":"17"},{"size":5910,"mtime":1608303097148,"results":"23","hashOfConfig":"17"},{"size":850,"mtime":1608302364264,"results":"24","hashOfConfig":"17"},{"size":1729,"mtime":1608368504728,"results":"25","hashOfConfig":"17"},{"size":438,"mtime":1608220502216,"results":"26","hashOfConfig":"17"},{"size":3004,"mtime":1608302431272,"results":"27","hashOfConfig":"17"},{"size":1550,"mtime":1608302315945,"results":"28","hashOfConfig":"17"},{"size":362,"mtime":1608029879446,"results":"29","hashOfConfig":"17"},{"size":1254,"mtime":1608565224248,"results":"30","hashOfConfig":"17"},{"size":356,"mtime":1608278117008,"results":"31","hashOfConfig":"17"},{"size":104,"mtime":1608029879450,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"cdf6y6",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qygpck",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/alexey/Documents/chat/web/src/index.js",[],["71","72"],"/Users/alexey/Documents/chat/web/src/route/appRouter.tsx",[],["73","74"],"/Users/alexey/Documents/chat/web/src/users/user.tsx",["75"],"/Users/alexey/Documents/chat/web/src/auth/query.ts",[],"/Users/alexey/Documents/chat/web/src/auth/register.tsx",["76","77","78","79","80"],"import React, { ReactElement, useRef } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignUpM} from './query'\nimport { useQuery, useMutation } from \"@apollo/react-hooks\"\nimport {User} from './types'\nimport { Formik, FormikProps, Form } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\n\ninterface CreateAccountInput {\n  email: string\n  password: string\n  name: string\n}\n\nconst initValues: CreateAccountInput = {\n  email:\"\",\n  password:\"\",\n  name:\"\"\n}\n\n\n const validationSchema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.string().required().min(6),\n  name: yup.string().required()\n})\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const nameInputReference= useRef<HTMLInputElement | null>(null)\n  const emailInputReference= useRef<HTMLInputElement | null>(null)\n  const passwordInputReference= useRef<HTMLInputElement | null>(null)\n  const [userSignUp]=useMutation<User>(UserSignUpM)\n  const history =useHistory()\n\n  const handleSubmit = (event:any , formikBag:any): void =>{\n    console.log(event.target, formikBag)\n  }\n\n  const setNameValue = (formikBag:any): void=>{\n    const nameInput:any = document.getElementById(\"name\")\n    if(nameInput ){\n      formikBag.setFieldValue(\"name\", nameInput.value)\n      console.log(nameInput.value);\n\n    }\n\n  }\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignUpAsync = async(values:CreateAccountInput):Promise<void> =>{\n    try {\n     await userSignUp({\n        variables: {\n          input: {\n            email: values.email,\n            name: values.name,\n            password: values.password\n          },\n        },\n      })\n    } catch {}\n    finally{\n      history.push(rootRoutes.login)\n    }\n  }\n\n\n  return (\n    <Formik\n      onSubmit={(values):void => console.log(values)}\n      initialValues={initValues}\n      validationSchema={validationSchema}\n      component={(\n        formikBag: FormikProps<CreateAccountInput>\n    ): ReactElement<FormikProps<CreateAccountInput>> =>{\n      return(\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Form id=\"test\" className={classes.form}  >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Name\"\n                autoFocus\n                ref={nameInputReference}\n                onBlur={():void=>setNameValue(formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                ref={emailInputReference}\n                onBlur={():void=>setEmailValue(formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                ref={passwordInputReference}\n                onBlur={():void=>setPasswordValue( formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={():Promise<void> => userSignUpAsync(formikBag.values)}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href={rootRoutes.login} variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </Form>\n      </div>\n    </Container>\n      )\n    }}\n    />\n\n  );\n}\n","/Users/alexey/Documents/chat/web/src/auth/auth.tsx",["81"],"import React, { ReactElement, Fragment } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignIn} from \"./query\"\nimport {  useMutation } from \"@apollo/react-hooks\"\nimport { Formik, FormikProps } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\nimport get from \"lodash/get\"\nimport Cookies from \"js-cookie\"\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport * as bcrypt from \"bcryptjs\"\n\nconst test = async()=>{\n  const salt = await bcrypt.genSalt(10)\n  const password =\"1234123\"\nconst hash = await bcrypt.hash(password, \"$2a$10$Fv476yh.Mf5w4qGAzB1MwO\")\n  console.log(hash);\n\n}\ntest()\ninterface SignInInput {\n  email:string\n  password:string\n}\n\nconst initialValues:SignInInput= {\n  email:\"\",\n  password:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().required().test(\"err\", \"err\", ((value): boolean => !!value && value.includes(\"@\"))),\n  password: yup.string().required().min(6),\n})\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\ninterface Props{\n  setUserId: (value: string)=>void\n  userId: string | null\n}\n\nexport default function SignIn({\n  setUserId,\n  userId\n}:Props) {\n  const classes = useStyles();\n  const history = useHistory()\n  const [userSignIn]=useMutation<string>(UserSignIn)\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignIpAsync = async(formikBag:FormikProps<SignInInput>):Promise<void> =>{\n    if(!formikBag.errors.email && !formikBag.errors.password){\n      console.log(formikBag.values);\n\n    try {\n     await userSignIn({\n        variables: {\n          input: {\n            email: formikBag.values.email,\n            password: formikBag.values.password\n          },\n        },\n      }).then((response: any):void =>{\n         if (get(response, \"data.userSignIn\")){\n          setUserId(get(response, \"data.userSignIn\"))\n          Cookies.set(\"userId\", get(response, \"data.userSignIn.id\"))\n          Cookies.set(\"userName\", get(response, \"data.userSignIn.userName\"))\n          Cookies.set(\"token\", get(response, \"data.userSignIn.token\"))\n          history.push(rootRoutes.chat)\n         }else{\n          toast.error(\"Email or password entered incorrect\", {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log(response);\n\n         }\n        console.log(get(response, \"data.userSignIn\"));\n        })\n    } catch {}\n  }else{\n    toast.error(\"Email or password entered incorrect\", {\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n  }\n  }\n\n  return (\n    <Fragment>\n    <Formik\n    onSubmit={(values):void => console.log(values)}\n    initialValues={initialValues}\n    validationSchema={validationSchema}\n    component={(\n      formikBag\n    ): ReactElement<FormikProps<SignInInput>> =>{\n      return(\n        <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete= \"new-password\"\n              inputProps={{\n                form: {\n                  autocomplete: 'off',\n                },\n              }}\n              onChange={():void=>setEmailValue(formikBag)}\n              autoFocus\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={():void=>setPasswordValue(formikBag)}\n              autoComplete= \"new-password\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={():Promise<void>=> userSignIpAsync(formikBag)}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link href={rootRoutes.register} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n      )\n    }}\n    />\n    <ToastContainer />\n    </Fragment>\n  );\n}\n","/Users/alexey/Documents/chat/web/src/chat/chat.tsx",["82","83","84","85"],"import React, { ReactElement, useEffect } from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport {MessageList} from \"./messageList\"\nimport {SendMessage} from \"./sendMessage\"\nimport Cookies from \"js-cookie\"\nimport {useHistory} from \"react-router-dom\"\nimport {rootRoutes} from \"../route/routes\"\ninterface Props{\n  userId: string | null\n}\nconst Chat =({\n  userId\n}:Props):ReactElement =>{\n  const id= Cookies.get(\"userId\")\n  const history = useHistory()\n\n\n  // useEffect(() => {\n  //   !id &&\n  //   history.push(rootRoutes.login)\n  // }, [history, id])\n\n\n\n    return (\n      <Box width=\"100vw\" height=\"90vh\" display=\"flex\" justifyContent=\"center\" >\n        <Box >\n          <MessageList />\n        </Box>\n\n        <Box  position=\"fixed\" bottom=\"0\">\n          <SendMessage userId={userId} />\n        </Box>\n      </Box>\n    )\n\n}\n\nexport default Chat\n","/Users/alexey/Documents/chat/web/src/chat/messageList.tsx",["86"],"import React, { ReactElement, useEffect, useState } from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport { useQuery, useSubscription } from \"@apollo/react-hooks\"\nimport {GetMessagesQ, NewMessageS} from \"./query\"\nimport Cookies from \"js-cookie\"\nimport styled from 'styled-components'\n\n\nconst StyledList= styled.ul`\n  padding-left:10px;\n  padding-right:10px;\n  list-style:none;\n`\n\nconst StyledItemList= styled.li`\n  padding-bottom: 10px;\n  padding-top: 10px;\n  border: 1px solid rgb(63, 81, 181);\n  border-radius: 10px;\n  margin-top:10px;\n  margin-bottom:10px;\n`\n\n\n\nexport const MessageList = ():ReactElement =>{\n  const id = Cookies.get(\"userId\")\n  const [messageList, setMessageList]= useState([\"\"])\n  const { data, loading } = useQuery(GetMessagesQ, {\n    variables: {\n      senderId: id\n    },\n  })\n\n  useEffect(() => {\n    console.log(data)\n    setMessageList(data.getMessages)\n  }, [loading, data])\n\n  const {data: subData, loading: subLoading} = useSubscription(NewMessageS)\n  console.log(data, subData);\n\n\n  useEffect(() => {\n    const list = document.getElementById(\"messageList\")\n    if(!!subData && list ){\n\n      const newMessageList= [...messageList, subData.newMessage]\n\n      setMessageList(newMessageList)\n      list.scrollTop = list.scrollHeight\n    }\n\n  }, [subLoading, subData])\n\n\n\n\n  return (\n    <Box width=\"100vw\" height=\"70vh\" id=\"messageList\" overflow=\"scroll\">\n      <StyledList >\n        {!loading && messageList  && messageList.map((message:any, index:number)=> <StyledItemList key={index} >\n          <Box textAlign=\"left\" marginLeft=\"10px\">{message.senderName}: </Box>\n          <Box marginTop=\"20px\" >{message.text}</Box>\n        </StyledItemList>\n        )}\n      </StyledList>\n    </Box>\n  )\n}\n","/Users/alexey/Documents/chat/web/src/chat/query.ts",[],"/Users/alexey/Documents/chat/web/src/chat/sendMessage.tsx",["87","88","89"],"import React, { ReactElement, useEffect, Fragment } from \"react\"\nimport {TextField, Box, Button} from \"@material-ui/core\"\nimport {  useMutation } from \"@apollo/react-hooks\"\nimport {SendMessageM} from \"./query\"\nimport {Message} from \"./types\"\nimport {Formik, FormikProps} from \"formik\"\nimport * as yup from 'yup'\nimport {useHistory} from \"react-router-dom\"\nimport { rootRoutes } from \"../route/routes\"\nimport Cookies from \"js-cookie\"\nimport styled from 'styled-components'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst StyledTextField=styled(TextField)`\n  width:300px;\n  border:1px solid #3f51b5;\n  border-radius:5px;\n`\n\ninterface SendMessageInput {\n  senderId: string\n  text:string\n}\n\nconst initialValues:SendMessageInput = {\n  senderId: \"\",\n  text:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  text: yup.string().required().max(500),\n  senderId: yup.string().required(),\n})\n\ninterface Props{\n  userId: string | null\n}\nexport const SendMessage = ({\n  userId\n}:Props):ReactElement =>{\n  const [sendMessage] = useMutation<Message>(SendMessageM)\n  const history= useHistory()\n  const id= Cookies.get(\"userId\")\n  const userName= Cookies.get(\"userName\")\n  // useEffect(():void => {\n  //   if(!id){\n  //     history.push(rootRoutes.login)\n  //   }\n  // }, [history, id])\n\n\n  const setTextValue = (formikBag:any): void=>{\n    const sendMessageInput:any = document.getElementById(\"sendMessageInput\")\n    if(sendMessageInput){\n    formikBag.setFieldValue(\"text\", sendMessageInput.value)\n    }\n  }\n\n\n  const  sendMessageAsync = async(formikBag:FormikProps<SendMessageInput>, event:any):Promise<void> =>{\n    event.preventDefault()\n    console.log(formikBag.errors.text)\n    if(formikBag.values.text && !formikBag.errors.text){\n    try {\n     await sendMessage({\n        variables: {\n          input: {\n            senderId: id,\n            text: formikBag.values.text,\n            senderName: userName\n          },\n        },\n      })\n    } catch {}\n    finally{\n      formikBag.resetForm()\n    }\n  }else{\n    toast.error(\"Max lenght 500 simbols\",{\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n    formikBag.resetForm()\n  }\n  }\n\n  return (\n    <Fragment>\n    <Formik\n    onSubmit={(values):void => console.log(values)}\n    initialValues={initialValues}\n    validationSchema={validationSchema}\n    component={(\n      formikBag\n    ): ReactElement<FormikProps<SendMessageInput>> =>{\n      return(\n        <Box width=\"300px\" height=\"150px\"  >\n\n\n        <StyledTextField\n         id=\"sendMessageInput\" required  variant=\"outlined\"\n         autoComplete=\"off\"\n         onChange={():void=> setTextValue(formikBag)}\n         inputProps={{\n           autoComplete:\"none\"\n         }}\n          />\n\n        <Box marginTop=\"10px\" >\n          <Button  variant=\"contained\" color=\"primary\" onClick={(event):Promise<void>=> sendMessageAsync(formikBag, event)} >send </Button>\n        </Box>\n\n\n      </Box>\n)\n}}\n/>\n<ToastContainer />\n</Fragment>\n  )}\n","/Users/alexey/Documents/chat/web/src/ui/header.tsx",["90"],"import React, { ReactElement, useEffect } from 'react'\nimport {Box,  Button} from '@material-ui/core'\nimport Cookies from \"js-cookie\"\nimport {useHistory} from \"react-router-dom\"\nimport {rootRoutes} from \"../route/routes\"\n\n\nconst Header = (): ReactElement =>{\n\n  const history=useHistory()\n\n  // useEffect(() => {\n  //   const id= Cookies.get(\"userId\")\n  //   const name = Cookies.get(\"userName\")\n  //   if(name && id){\n  //     history.push(rootRoutes.chat)\n  //   }\n  // }, [history])\n\n  const logout =():void=>{\n    Cookies.remove(\"userId\")\n    Cookies.remove(\"userName\")\n     history.push(rootRoutes.login)\n\n  }\n\n  const login =():void =>{\n    history.push(rootRoutes.login)\n  }\n\n  return (\n    <Box width=\"100vw\" height=\"50px\" bgcolor=\"#3f51b5\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n\n      <Box width=\"50vw\" display=\"flex\" justifyContent=\"flex-start\" marginLeft=\"10px\" fontSize=\"32px\" color=\"white\" fontWeight=\"500\" > WebChat </Box>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\" width=\"50vw\">\n      {!Cookies.get(\"userId\") ?\n        (<Box bgcolor=\"white\" border=\"1px solid white\" borderRadius=\"10px\" margin=\"5px 10px\" height=\"40px\" textAlign=\"center\">\n          <Button  onClick={login} color=\"primary\">login</Button>\n        </Box>)\n        :\n        (<Box bgcolor=\"white\" border=\"1px solid white\" borderRadius=\"10px\" margin=\"5px 10px\" height=\"40px\" textAlign=\"center\">\n          <Button  onClick={logout} color=\"primary\" >logout</Button>\n        </Box>)\n      }\n      </Box>\n    </Box>\n  )\n}\n\nexport default Header\n","/Users/alexey/Documents/chat/web/src/reportWebVitals.js",[],"/Users/alexey/Documents/chat/web/src/apolloSetup.ts",[],"/Users/alexey/Documents/chat/web/src/App.tsx",[],"/Users/alexey/Documents/chat/web/src/route/routes.ts",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":18},{"ruleId":"95","severity":1,"message":"99","line":6,"column":8,"nodeType":"97","messageId":"98","endLine":6,"endColumn":24},{"ruleId":"95","severity":1,"message":"100","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":16},{"ruleId":"95","severity":1,"message":"101","line":10,"column":8,"nodeType":"97","messageId":"98","endLine":10,"endColumn":11},{"ruleId":"95","severity":1,"message":"102","line":17,"column":10,"nodeType":"97","messageId":"98","endLine":17,"endColumn":18},{"ruleId":"95","severity":1,"message":"103","line":72,"column":9,"nodeType":"97","messageId":"98","endLine":72,"endColumn":21},{"ruleId":"95","severity":1,"message":"104","line":25,"column":9,"nodeType":"97","messageId":"98","endLine":25,"endColumn":13},{"ruleId":"95","severity":1,"message":"105","line":1,"column":31,"nodeType":"97","messageId":"98","endLine":1,"endColumn":40},{"ruleId":"95","severity":1,"message":"106","line":7,"column":9,"nodeType":"97","messageId":"98","endLine":7,"endColumn":19},{"ruleId":"95","severity":1,"message":"107","line":14,"column":9,"nodeType":"97","messageId":"98","endLine":14,"endColumn":11},{"ruleId":"95","severity":1,"message":"108","line":15,"column":9,"nodeType":"97","messageId":"98","endLine":15,"endColumn":16},{"ruleId":"109","severity":1,"message":"110","line":54,"column":6,"nodeType":"111","endLine":54,"endColumn":27,"suggestions":"112"},{"ruleId":"95","severity":1,"message":"105","line":1,"column":31,"nodeType":"97","messageId":"98","endLine":1,"endColumn":40},{"ruleId":"95","severity":1,"message":"106","line":9,"column":10,"nodeType":"97","messageId":"98","endLine":9,"endColumn":20},{"ruleId":"95","severity":1,"message":"108","line":43,"column":9,"nodeType":"97","messageId":"98","endLine":43,"endColumn":16},{"ruleId":"95","severity":1,"message":"105","line":1,"column":31,"nodeType":"97","messageId":"98","endLine":1,"endColumn":40},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'ListItem' is defined but never used.","Identifier","unusedVar","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'useQuery' is defined but never used.","'handleSubmit' is assigned a value but never used.","'salt' is assigned a value but never used.","'useEffect' is defined but never used.","'rootRoutes' is defined but never used.","'id' is assigned a value but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messageList'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [subLoading, subData, messageList]",{"range":"118","text":"119"},[1278,1299],"[subLoading, subData, messageList]"]