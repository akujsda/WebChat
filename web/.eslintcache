[{"/Users/alexey/Documents/chat/web/src/index.js":"1","/Users/alexey/Documents/chat/web/src/route/appRouter.tsx":"2","/Users/alexey/Documents/chat/web/src/users/user.tsx":"3","/Users/alexey/Documents/chat/web/src/auth/query.ts":"4","/Users/alexey/Documents/chat/web/src/auth/register.tsx":"5","/Users/alexey/Documents/chat/web/src/auth/auth.tsx":"6","/Users/alexey/Documents/chat/web/src/chat/chat.tsx":"7","/Users/alexey/Documents/chat/web/src/chat/messageList.tsx":"8","/Users/alexey/Documents/chat/web/src/chat/query.ts":"9","/Users/alexey/Documents/chat/web/src/chat/sendMessage.tsx":"10","/Users/alexey/Documents/chat/web/src/App.js":"11","/Users/alexey/Documents/chat/web/src/ui/header.tsx":"12"},{"size":523,"mtime":1608029879431,"results":"13","hashOfConfig":"14"},{"size":819,"mtime":1608120939750,"results":"15","hashOfConfig":"14"},{"size":296,"mtime":1608029879474,"results":"16","hashOfConfig":"14"},{"size":296,"mtime":1608112389746,"results":"17","hashOfConfig":"14"},{"size":5669,"mtime":1608111738947,"results":"18","hashOfConfig":"14"},{"size":4779,"mtime":1608128123247,"results":"19","hashOfConfig":"14"},{"size":690,"mtime":1608186686938,"results":"20","hashOfConfig":"14"},{"size":1279,"mtime":1608187935463,"results":"21","hashOfConfig":"14"},{"size":434,"mtime":1608129771057,"results":"22","hashOfConfig":"14"},{"size":2364,"mtime":1608189007724,"results":"23","hashOfConfig":"14"},{"size":352,"mtime":1608120777704,"results":"24","hashOfConfig":"14"},{"size":351,"mtime":1608029879465,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1qygpck",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/alexey/Documents/chat/web/src/index.js",["52","53"],"/Users/alexey/Documents/chat/web/src/route/appRouter.tsx",["54","55"],"/Users/alexey/Documents/chat/web/src/users/user.tsx",[],"/Users/alexey/Documents/chat/web/src/auth/query.ts",[],"/Users/alexey/Documents/chat/web/src/auth/register.tsx",["56","57","58","59","60"],"import React, { ReactElement, useRef } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignUpM} from './query'\nimport {useQuery, useMutation} from '@apollo/client';\nimport {User} from './types'\nimport { Formik, FormikProps, Form } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\n\ninterface CreateAccountInput {\n  email: string\n  password: string\n  name: string\n}\n\nconst initValues: CreateAccountInput = {\n  email:\"\",\n  password:\"\",\n  name:\"\"\n}\n\n\n const validationSchema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.string().required().min(6),\n  name: yup.string().required()\n})\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const nameInputReference= useRef<HTMLInputElement | null>(null)\n  const emailInputReference= useRef<HTMLInputElement | null>(null)\n  const passwordInputReference= useRef<HTMLInputElement | null>(null)\n  const [userSignUp]=useMutation<User>(UserSignUpM)\n  const history =useHistory()\n\n  const handleSubmit = (event:any , formikBag:any): void =>{\n    console.log(event.target, formikBag)\n  }\n\n  const setNameValue = (formikBag:any): void=>{\n    const nameInput:any = document.getElementById(\"name\")\n    if(nameInput ){\n      formikBag.setFieldValue(\"name\", nameInput.value)\n      console.log(nameInput.value);\n\n    }\n\n  }\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignUpAsync = async(values:CreateAccountInput):Promise<void> =>{\n    try {\n     await userSignUp({\n        variables: {\n          input: {\n            email: values.email,\n            name: values.name,\n            password: values.password\n          },\n        },\n      })\n    } catch {}\n    finally{\n      history.push(rootRoutes.login)\n    }\n  }\n\n\n  return (\n    <Formik\n      onSubmit={(values):void => console.log(values)}\n      initialValues={initValues}\n      validationSchema={validationSchema}\n      component={(\n        formikBag: FormikProps<CreateAccountInput>\n    ): ReactElement<FormikProps<CreateAccountInput>> =>{\n      return(\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Form id=\"test\" className={classes.form}  >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Name\"\n                autoFocus\n                ref={nameInputReference}\n                onBlur={():void=>setNameValue(formikBag)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                ref={emailInputReference}\n                onBlur={():void=>setEmailValue(formikBag)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                ref={passwordInputReference}\n                onBlur={():void=>setPasswordValue( formikBag)}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={():Promise<void> => userSignUpAsync(formikBag.values)}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href={rootRoutes.login} variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </Form>\n      </div>\n    </Container>\n      )\n    }}\n    />\n\n  );\n}\n","/Users/alexey/Documents/chat/web/src/auth/auth.tsx",["61","62","63","64","65"],"import React, { ReactElement } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignIn} from \"./query\"\nimport {useQuery, useMutation} from '@apollo/client';\nimport { Formik, FormikProps, Form } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\nimport get from \"lodash/get\"\nimport Cookies from \"js-cookie\"\ninterface SignInInput {\n  email:string\n  password:string\n}\n\nconst initialValues:SignInInput= {\n  email:\"\",\n  password:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.string().required().min(6),\n})\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\ninterface Props{\n  setUserId: (value: string)=>void\n}\n\nexport default function SignIn({\n  setUserId\n}:Props) {\n  const classes = useStyles();\n  const history = useHistory()\n  const [userSignIn]=useMutation<string>(UserSignIn)\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignIpAsync = async(values:SignInInput):Promise<void> =>{\n    try {\n     await userSignIn({\n        variables: {\n          input: {\n            email: values.email,\n            password: values.password\n          },\n        },\n      }).then((response):void =>{\n         if (response){\n          setUserId(get(response, \"data.userSignIn\"))\n          Cookies.set(\"userId\", get(response, \"data.userSignIn\"))\n          history.push(rootRoutes.chat)\n         }\n        })\n    } catch {}\n  }\n\n  return (\n    <Formik\n    onSubmit={(values):void => console.log(values)}\n    initialValues={initialValues}\n    validationSchema={validationSchema}\n    component={(\n      formikBag\n    ): ReactElement<FormikProps<SignInInput>> =>{\n      return(\n        <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              onChange={():void=>setEmailValue(formikBag)}\n              autoFocus\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={():void=>setPasswordValue(formikBag)}\n              autoComplete=\"current-password\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={():Promise<void>=> userSignIpAsync(formikBag.values)}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link href={rootRoutes.register} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n      )\n    }}\n    />\n\n  );\n}\n","/Users/alexey/Documents/chat/web/src/chat/chat.tsx",[],"/Users/alexey/Documents/chat/web/src/chat/messageList.tsx",["66","67","68","69"],"/Users/alexey/Documents/chat/web/src/chat/query.ts",[],"/Users/alexey/Documents/chat/web/src/chat/sendMessage.tsx",[],"/Users/alexey/Documents/chat/web/src/App.js",[],"/Users/alexey/Documents/chat/web/src/ui/header.tsx",["70"],{"ruleId":"71","severity":1,"message":"72","line":7,"column":10,"nodeType":"73","messageId":"74","endLine":7,"endColumn":18},{"ruleId":"71","severity":1,"message":"75","line":7,"column":20,"nodeType":"73","messageId":"74","endLine":7,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":3,"column":41,"nodeType":"73","messageId":"74","endLine":3,"endColumn":51},{"ruleId":"76","severity":1,"message":"78","line":7,"column":8,"nodeType":"73","messageId":"74","endLine":7,"endColumn":17},{"ruleId":"76","severity":1,"message":"79","line":6,"column":8,"nodeType":"73","messageId":"74","endLine":6,"endColumn":24},{"ruleId":"76","severity":1,"message":"80","line":7,"column":8,"nodeType":"73","messageId":"74","endLine":7,"endColumn":16},{"ruleId":"76","severity":1,"message":"81","line":10,"column":8,"nodeType":"73","messageId":"74","endLine":10,"endColumn":11},{"ruleId":"76","severity":1,"message":"72","line":17,"column":9,"nodeType":"73","messageId":"74","endLine":17,"endColumn":17},{"ruleId":"76","severity":1,"message":"82","line":72,"column":9,"nodeType":"73","messageId":"74","endLine":72,"endColumn":21},{"ruleId":"76","severity":1,"message":"79","line":6,"column":8,"nodeType":"73","messageId":"74","endLine":6,"endColumn":24},{"ruleId":"76","severity":1,"message":"80","line":7,"column":8,"nodeType":"73","messageId":"74","endLine":7,"endColumn":16},{"ruleId":"76","severity":1,"message":"81","line":10,"column":8,"nodeType":"73","messageId":"74","endLine":10,"endColumn":11},{"ruleId":"76","severity":1,"message":"72","line":17,"column":9,"nodeType":"73","messageId":"74","endLine":17,"endColumn":17},{"ruleId":"76","severity":1,"message":"83","line":18,"column":31,"nodeType":"73","messageId":"74","endLine":18,"endColumn":35},{"ruleId":"76","severity":1,"message":"84","line":1,"column":31,"nodeType":"73","messageId":"74","endLine":1,"endColumn":40},{"ruleId":"76","severity":1,"message":"85","line":4,"column":23,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},{"ruleId":"76","severity":1,"message":"86","line":26,"column":26,"nodeType":"73","messageId":"74","endLine":26,"endColumn":41},{"ruleId":"76","severity":1,"message":"87","line":26,"column":43,"nodeType":"73","messageId":"74","endLine":26,"endColumn":50},{"ruleId":"76","severity":1,"message":"88","line":2,"column":14,"nodeType":"73","messageId":"74","endLine":2,"endColumn":23},"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'gql' is defined but never used.","@typescript-eslint/no-unused-vars","'useHistory' is defined but never used.","'UsersList' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'handleSubmit' is assigned a value but never used.","'Form' is defined but never used.","'useEffect' is defined but never used.","'NewMessageS' is defined but never used.","'subscribeToMore' is assigned a value but never used.","'refetch' is assigned a value but never used.","'Container' is defined but never used."]