{"version":3,"sources":["route/routes.ts","auth/query.ts","auth/auth.tsx","auth/register.tsx","chat/query.ts","chat/messageList.tsx","chat/sendMessage.tsx","friends/query.ts","friends/friend-list.tsx","friends/add-friend.tsx","friends/add-friend-modal.tsx","friends/friends.tsx","chat/chat.tsx","ui/header.tsx","route/appRouter.tsx","apolloSetup.ts","i18n/locales.ts","i18n/messages/en-us.ts","i18n/messages/index.ts","i18n/provider.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["rootRoutes","UserSignUpM","gql","UserSignIn","initialValues","email","password","validationSchema","yup","shape","required","matches","min","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","SignIn","classes","history","useHistory","useMutation","userSignIn","intl","useIntl","messages","userSignIpAsync","formikBag","a","errors","variables","input","values","then","response","get","Cookies","set","push","toast","error","incorrectEmail","position","POSITION","BOTTOM_RIGHT","onSubmit","console","log","component","Container","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","TextField","fullWidth","id","label","emailLong","name","autoComplete","inputProps","autocomplete","onChange","emailInput","document","getElementById","setFieldValue","value","setEmailValue","autoFocus","type","passwordInput","setPasswordValue","Button","color","onClick","signIn","Grid","container","item","Link","href","dontHaveAccount","initValues","SignUp","userSignUp","userSignUpAsync","signUp","xs","onBlur","nameInput","setNameValue","justify","alreadyHaveAccount","SendMessageM","GetMessagesQ","NewMessageS","StyledList","styled","ul","StyledItemList","li","MessageList","currentChat","useState","messageList","setMessageList","useQuery","chatId","data","loading","useEffect","getMessages","useSubscription","subData","subLoading","list","newMessageList","newMessage","scrollTop","scrollHeight","Box","height","overflow","map","message","index","textAlign","marginLeft","padding","senderName","text","StyledTextField","max","senderId","SendMessage","sendMessage","sendMessageAsync","resetForm","sendMessageInput","setTextValue","marginBottom","send","GetMyChatsQ","UsersQ","CreateChatM","NewChatS","user","border","FriendList","isListClose","setCurrentChat","userId","chats","setChats","token","getMyChats","chatList","newChat","recipientName","AddFriend","setModalActive","justifyContent","userList","listStyle","marginRight","AddFriendModal","isModalActive","createChat","createChatAsync","event","target","recipientId","Modal","open","bgcolor","users","FriendsPage","setListClose","zIndex","Chat","bottom","Header","isLoggedIn","setLoggedIn","isButtonVisible","setButtonVisible","window","location","includes","fontSize","fontWeight","webChat","borderRadius","remove","signOut","AppRouter","path","exact","wsLink","WebSocketLink","uri","options","reconnect","connectionParams","autorization","httpLink","HttpLink","authLink","setContext","_","headers","link","split","query","definition","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","LOCALES","en","Provider","children","locale","textComponent","Fragment","App","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d06d42dc.chunk.js","sourcesContent":["export const rootRoutes = {\n  root: \"/\",\n  login: \"/login\",\n  register: \"/register\",\n  chat: \"/chat\",\n}\n","import gql from \"graphql-tag\"\n\nexport const UserSignUpM = gql`\n  mutation createUser($input: NewUser!){\n    createUser(input: $input)\n  }\n`\n\nexport const UserSignIn = gql`\n  mutation userSignIn($input: UserSignInInput!){\n    userSignIn(input: $input){\n      id\n      userName\n      token\n    }\n  }\n`\n","/* eslint-disable no-useless-escape */\nimport React, { ReactElement, Fragment } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignIn} from \"./query\"\nimport {  useMutation } from \"@apollo/react-hooks\"\nimport { Formik, FormikProps } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\nimport get from \"lodash/get\"\nimport Cookies from \"js-cookie\"\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {useIntl} from 'react-intl';\n\n\ninterface SignInInput {\n  email:string\n  password:string\n}\n\nconst initialValues:SignInInput= {\n  email:\"\",\n  password:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().required().matches(/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/),\n  password: yup.string().required().min(6),\n})\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nexport default function SignIn () {\n  const classes = useStyles();\n  const history = useHistory()\n  const [userSignIn]=useMutation<string>(UserSignIn)\n  const intl=useIntl().messages;\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignIpAsync = async(formikBag:FormikProps<SignInInput>):Promise<void> =>{\n    if(!formikBag.errors.email && !formikBag.errors.password){\n    try {\n     await userSignIn({\n        variables: {\n          input: {\n            email: formikBag.values.email,\n            password: formikBag.values.password\n          },\n        },\n      }).then((response: any):void =>{\n         if (get(response, \"data.userSignIn\")){\n          Cookies.set(\"userId\", get(response, \"data.userSignIn.id\"))\n          Cookies.set(\"userName\", get(response, \"data.userSignIn.userName\"))\n          Cookies.set(\"token\", get(response, \"data.userSignIn.token\"))\n          history.push(rootRoutes.chat)\n         }\n        })\n    } catch {\n      toast.error(`${intl.incorrectEmail}`, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    }\n  }else{\n    toast.error(`${intl.incorrectEmail}`, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n  }\n  }\n\n  return (\n    <Fragment>\n    <Formik\n    onSubmit={(values):void => console.log(values)}\n    initialValues={initialValues}\n    validationSchema={validationSchema}\n    component={(\n      formikBag\n    ): ReactElement<FormikProps<SignInInput>> =>{\n      return(\n        <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label={`${intl.emailLong}`}\n              name=\"email\"\n              autoComplete= \"new-password\"\n              inputProps={{\n                form: {\n                  autocomplete: 'off',\n                },\n              }}\n              onChange={():void=>setEmailValue(formikBag)}\n              autoFocus\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={():void=>setPasswordValue(formikBag)}\n              autoComplete= \"new-password\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={():Promise<void>=> userSignIpAsync(formikBag)}\n            >\n              {`${intl.signIn}`}\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link href={rootRoutes.register} variant=\"body2\">\n                  {`${intl.dontHaveAccount}`}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n      )\n    }}\n    />\n    <ToastContainer />\n    </Fragment>\n  );\n}\n","/* eslint-disable no-useless-escape */\nimport React, { ReactElement, Fragment } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignUpM} from './query'\nimport { useMutation } from \"@apollo/react-hooks\"\nimport {User} from './types'\nimport { Formik, FormikProps, Form } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\nimport {useIntl} from 'react-intl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ExecutionResult } from 'graphql';\n\ninterface CreateAccountInput {\n  email: string\n  password: string\n  name: string\n}\n\nconst initValues: CreateAccountInput = {\n  email:\"\",\n  password:\"\",\n  name:\"\"\n}\n\n\n const validationSchema = yup.object().shape({\n  email: yup.string().required().matches(/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/),\n  password: yup.string().required().min(6),\n  name: yup.string().required()\n})\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const [userSignUp]=useMutation<User>(UserSignUpM)\n  const history =useHistory()\n  const intl = useIntl().messages\n\n  const setNameValue = (formikBag:any): void=>{\n    const nameInput:any = document.getElementById(\"name\")\n    if(nameInput ){\n      formikBag.setFieldValue(\"name\", nameInput.value)\n    }\n  }\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n      formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n      formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignUpAsync = async(formikBag:FormikProps<CreateAccountInput>):Promise<void> =>{\n    if (!formikBag.errors.email && !formikBag.errors.name && !formikBag.errors.password){\n    try {\n     await userSignUp({\n        variables: {\n          input: {\n            email: formikBag.values.email,\n            name: formikBag.values.name,\n            password: formikBag.values.password\n          },\n        },\n      })\n    } catch {}\n    finally{\n      history.push(rootRoutes.login)\n    }\n  }else{\n    toast.error(`${intl.incorrectEmail}`, {\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n  }\n  }\n\n\n  return (\n    <Fragment>\n    <Formik\n      onSubmit={():Promise<ExecutionResult<User>> =>userSignUp()}\n      initialValues={initValues}\n      validationSchema={validationSchema}\n      component={(\n        formikBag: FormikProps<CreateAccountInput>\n    ): ReactElement<FormikProps<CreateAccountInput>> =>{\n      return(\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          {`${intl.signUp}`}\n        </Typography>\n        <Form id=\"test\" className={classes.form}  >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label={`${intl.name}`}\n                autoFocus\n                onBlur={():void=>setNameValue(formikBag)}\n                inputProps={{\n                  autoComplete:\"off\"\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label={`${intl.emailLong}`}\n                name=\"email\"\n                onBlur={():void=>setEmailValue(formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label={`${intl.password}`}\n                type=\"password\"\n                id=\"password\"\n                onBlur={():void=>setPasswordValue(formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={():Promise<void> => userSignUpAsync(formikBag)}\n          >\n            {`${intl.signUp}`}\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href={rootRoutes.login} variant=\"body2\">\n                {`${intl.alreadyHaveAccount}`}\n              </Link>\n            </Grid>\n          </Grid>\n        </Form>\n      </div>\n    </Container>\n      )\n    }}\n    />\n    <ToastContainer />\n  </Fragment>\n  );\n}\n","import gql from \"graphql-tag\"\n\n\nexport const SendMessageM = gql`\n  mutation sendMessage($input: NewMessage!){\n    sendMessage(input: $input){\n      text\n    }\n  }\n`\n\nexport const GetMessagesQ = gql`\n  query getMessages($chatId: String){\n    getMessages(chatId: $chatId){\n      text\n      date\n      senderName\n    }\n  }\n`\n\nexport const NewMessageS = gql`\n  subscription{\n      newMessage {\n      text\n      date\n      senderName\n    }\n  }\n`\n","import React, { ReactElement, useEffect, useState } from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport { useQuery, useSubscription } from \"@apollo/react-hooks\"\nimport {GetMessagesQ, NewMessageS} from \"./query\"\nimport styled from 'styled-components'\n\n\nconst StyledList= styled.ul`\n  padding-left:10px;\n  padding-right:10px;\n  list-style:none;\n`\n\nconst StyledItemList= styled.li`\n  padding-bottom: 10px;\n  padding-top: 10px;\n  border: 1px solid rgb(63, 81, 181);\n  border-radius: 10px;\n  margin-top:10px;\n  margin-bottom:10px;\n`\n\n\ninterface Props {\n  currentChat: string | null\n}\nexport const MessageList = ({\n  currentChat\n}:Props):ReactElement =>{\n  const [messageList, setMessageList]= useState([\"\"])\n\n  const { data, loading } = useQuery(GetMessagesQ, {\n    variables: {\n      chatId: currentChat\n    },\n  })\n\n  useEffect(() => {\n    currentChat && setMessageList(data.getMessages)\n  }, [loading, data, currentChat])\n\n  const {data: subData, loading: subLoading} = useSubscription(NewMessageS)\n\n\n  useEffect(() => {\n    const list = document.getElementById(\"messageList\")\n    if(!!subData && list ){\n\n      const newMessageList= [...messageList, subData.newMessage]\n\n      setMessageList(newMessageList)\n      list.scrollTop = list.scrollHeight\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subLoading, subData])\n\n\n\n\n  return (\n    <Box width=\"100%\" height=\"80vh\" id=\"messageList\" overflow=\"scroll\" >\n      <StyledList >\n        {!loading && messageList && currentChat && messageList.map((message:any, index:number)=> {\n          return (\n            <StyledItemList key={index} >\n              <Box textAlign=\"left\" marginLeft=\"10px\" padding=\"5px\" >{message.senderName}: </Box>\n              <Box marginTop=\"20px\" padding=\"5px\">{message.text}</Box>\n            </StyledItemList>\n          )\n        }\n        )}\n      </StyledList>\n    </Box>\n  )\n}\n","import React, { ReactElement, Fragment } from \"react\"\nimport {TextField, Box, Button} from \"@material-ui/core\"\nimport {  useMutation } from \"@apollo/react-hooks\"\nimport {SendMessageM} from \"./query\"\nimport {Message} from \"./types\"\nimport {Formik, FormikProps} from \"formik\"\nimport * as yup from 'yup'\nimport styled from 'styled-components'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ExecutionResult } from \"graphql\"\nimport {useIntl} from 'react-intl';\n\nconst StyledTextField=styled(TextField)`\n  width:300px;\n  border:1px solid #3f51b5;\n  border-radius:5px;\n  margin-bottom: 10px;\n`\n\ninterface SendMessageInput {\n  chatId: string\n  text:string\n}\n\nconst initialValues:SendMessageInput = {\n  chatId: \"\",\n  text:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  text: yup.string().required().max(500),\n  senderId: yup.string().required(),\n})\n\ninterface Props {\n  currentChat: string | null\n}\n\nexport const SendMessage = ({\n  currentChat\n}:Props):ReactElement =>{\n  const [sendMessage] = useMutation<Message>(SendMessageM)\n  const intl = useIntl().messages\n\n  const setTextValue = (formikBag:any): void=>{\n    const sendMessageInput:any = document.getElementById(\"sendMessageInput\")\n    if(sendMessageInput){\n    formikBag.setFieldValue(\"text\", sendMessageInput.value)\n    }\n  }\n\n  const  sendMessageAsync = async(formikBag:FormikProps<SendMessageInput>):Promise<void> =>{\n    if(formikBag.values.text && !formikBag.errors.text){\n    try {\n     await sendMessage({\n        variables: {\n          input: {\n            chatId: currentChat,\n            text: formikBag.values.text,\n          },\n        },\n      })\n    } catch {}\n    finally{\n      formikBag.resetForm()\n    }\n  }else{\n    toast.error(\"Max lenght 500 simbols\",{\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n    formikBag.resetForm()\n  }\n  }\n\n  return (\n    <Fragment>\n      <Formik\n      onSubmit={():Promise<ExecutionResult<Message>> =>sendMessage()}\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      component={(\n        formikBag\n      ): ReactElement<FormikProps<SendMessageInput>> =>{\n        return(\n          <Box width=\"300px\" marginTop = \"10px\"  >\n            <StyledTextField\n            id=\"sendMessageInput\" required  variant=\"outlined\"\n            onChange={():void=> setTextValue(formikBag)}\n            inputProps={{\n              autoComplete:\"off\"\n            }}\n              />\n\n          <Box marginTop=\"10px\" marginBottom=\"10px\" >\n            <Button  variant=\"contained\" color=\"primary\" onClick={():Promise<void>=> sendMessageAsync(formikBag)} >{`${intl.send}`}</Button>\n          </Box>\n\n        </Box>\n          )\n          }}\n      />\n    <ToastContainer />\n  </Fragment>\n  )}\n","import gql from \"graphql-tag\"\n\nexport const GetMyChatsQ = gql`\n  query getMyChats($token: String!){\n    getMyChats(token: $token){\n      id\n      senderName\n      recipientName\n      senderId\n      recipientId\n    }\n  }\n`\n\nexport const UsersQ = gql`\n  query users{\n    users{\n      name\n      id\n      email\n    }\n  }\n`\n\nexport const CreateChatM = gql`\n  mutation createChat($input: NewChatInput!){\n    createChat(input: $input){\n      id\n    }\n  }\n`\n\nexport const NewChatS = gql`\n subscription{\n   newChat{\n    id\n      senderName\n      recipientName\n      senderId\n      recipientId\n   }\n  }\n`\n","import React, {useState, useEffect} from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport {GetMyChatsQ} from \"./query\"\nimport { useQuery, useSubscription } from \"@apollo/react-hooks\"\nimport Cookies from \"js-cookie\"\nimport {NewChatS} from \"./query\"\nimport {makeStyles} from \"@material-ui/core/styles\"\ninterface Props {\n  isListClose: boolean\n  setCurrentChat: (arg: string | null) => void\n}\n\nconst useStyles = makeStyles({\n  user:{\n    border:\"1px solid #3f51b5\",\n    margin:\"10px\"\n  }\n})\nexport const FriendList = ({\n  isListClose,\n  setCurrentChat\n}:Props) => {\n  const userId = Cookies.get('userId')\n  const [chats, setChats] = useState([''])\n  const classes= useStyles()\n  const {data, loading} = useQuery(GetMyChatsQ,{\n    variables:{\n      token: Cookies.get(\"token\")\n    }\n  })\n  const {data: subData, loading: subLoading} = useSubscription(NewChatS)\n\n  useEffect(() => {\n    setChats(data.getMyChats)\n  }, [loading, data])\n\n  useEffect(() => {\n    if(subData){\n      const chatList= [...chats, subData.newChat]\n      setChats(chatList)\n    }\n// eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subData, subLoading])\n\n\n  return (\n    <Box overflow=\"scroll\">\n      {!loading && chats && !isListClose  && chats.map((message:any, index:number)=> {\n          return (\n            <ul key={index}  onClick={():void => setCurrentChat(message.id)} className={classes.user}>\n              <Box textAlign=\"left\" marginLeft=\"10px\" padding=\"5px\">{userId === message.senderId ? message.recipientName : message.senderName}</Box>\n            </ul>\n          )\n        }\n      )\n      }\n    </Box>\n  )\n}\n","import React from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n\n\ninterface Props {\n  isListClose: boolean\n  setModalActive:(arg:boolean) => void\n}\nexport const AddFriend = ({\n  isListClose,\n  setModalActive\n}:Props) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"flex-start\" margin=\"10px\">\n      {!isListClose && (<AddCircleOutlineIcon onClick={()=>setModalActive(true)} />)}\n    </Box>\n  )\n}\n","import React from 'react'\nimport Modal from '@material-ui/core/Modal';\nimport Box from '@material-ui/core/Box'\nimport {UsersQ, CreateChatM} from \"./query\"\nimport {  useQuery, useMutation } from \"@apollo/react-hooks\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\n\ninterface User {\n  id:string\n  name: string\n  email: string\n}\n\ninterface Props{\n  setModalActive:(arg: boolean)=>void\n  isModalActive: boolean\n}\n\nconst useStyles = makeStyles({\n  userList:{\n    listStyle: \"none\",\n  },\n  user:{\n    padding: \"10px\",\n    border: \"1px solid #3f51b5\",\n    margin: \"5px\",\n    marginRight:\"30px\",\n  }\n})\n\n\nexport const AddFriendModal = ({\n  setModalActive,\n  isModalActive\n}:Props) =>{\n  const {data, loading}=useQuery(UsersQ)\n  const classes = useStyles();\n  const [createChat] = useMutation(CreateChatM)\n  const createChatAsync = async (event:any):Promise<void>=>{\n    if (event && event.target){\n      try {\n        createChat({\n          variables:{\n            input: {\n              recipientId: event.target.id\n            }\n          }\n        })\n      } catch {}\n    }\n  }\n\n\n\n  return (\n      <Modal open={isModalActive}>\n        <Box width=\"100vw\" height=\"100vh\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Box width=\"300px\" height=\"300px\" overflow=\"scroll\" bgcolor=\"white\">\n          <Box position=\"fixed\" marginLeft=\"10px\" marginTop=\"10px\" >\n            <CloseIcon onClick={()=>setModalActive(false)}/>\n          </Box>\n            <ul className={classes.userList} onClick= {createChatAsync}>\n            {!loading && data.users && data.users.map((user: User)=> <li className={classes.user} key={user.id} id={user.id}>{user.email} : {user.name}</li>)}\n            </ul>\n          </Box>\n        </Box>\n      </Modal>\n     )\n}\n","import React, {useState} from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport {FriendList} from \"./friend-list\"\nimport {AddFriend} from \"./add-friend\"\nimport DehazeIcon from '@material-ui/icons/Dehaze';\nimport {AddFriendModal} from \"./add-friend-modal\"\n\ninterface Props{\n  setCurrentChat: (arg: string | null) => void\n}\n\nconst FriendsPage = ({\n  setCurrentChat\n}: Props) => {\n  const [isListClose, setListClose] = useState<boolean>(false)\n  const [isModalActive, setModalActive] = useState<boolean>(false)\n  const toggleList = ():void => {\n    setListClose(!isListClose)\n  }\n\n  return(\n    <Box border=\"1px solid #3f51b5\" width= {isListClose ? \"50px\" : \"300px\"} height=\"100vh\" zIndex={10}>\n      <Box display=\"flex\" justifyContent=\"flex-end\" margin=\"10px\">\n      <DehazeIcon onClick={toggleList} />\n      </Box>\n      <AddFriend isListClose={isListClose} setModalActive={setModalActive} />\n      <FriendList isListClose={isListClose} setCurrentChat={setCurrentChat}  />\n      <AddFriendModal isModalActive={isModalActive} setModalActive={setModalActive} />\n    </Box>\n  )\n}\n\nexport default FriendsPage\n","import React, { ReactElement, useEffect } from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport {MessageList} from \"./messageList\"\nimport {SendMessage} from \"./sendMessage\"\nimport Cookies from \"js-cookie\"\nimport {useHistory} from \"react-router-dom\"\nimport {rootRoutes} from \"../route/routes\"\nimport FriendsPage from \"../friends/friends\"\n\n\ninterface Props {\n  currentChat: string | null\n  setCurrentChat: (arg: string | null) => void\n}\n\nconst Chat = ({\n  currentChat,\n  setCurrentChat\n}:Props):ReactElement =>{\n  const id= Cookies.get(\"userId\")\n  const history = useHistory()\n\n  useEffect(() => {\n    !id &&\n    history.push(rootRoutes.login)\n  }, [history, id])\n\n\n\n    return (\n      <Box width=\"100vw\"  display=\"flex\" justifyContent=\"center\" zIndex={0}>\n\n        <Box display=\"flex\" width=\"100vw\">\n          <FriendsPage setCurrentChat={setCurrentChat} />\n          <MessageList currentChat={currentChat} />\n        </Box>\n\n        <Box\n          width=\"100vw\"\n          position=\"fixed\"\n          zIndex=\"10\"\n          bgcolor=\"white\"\n          bottom=\"0\"\n          display=\"flex\"\n          justifyContent=\"center\"\n        >\n          {currentChat && (<SendMessage currentChat={currentChat} />)}\n        </Box>\n      </Box>\n    )\n\n}\n\nexport default Chat\n","import React, { ReactElement, useEffect, useState } from 'react'\nimport {Box,  Button} from '@material-ui/core'\nimport Cookies from \"js-cookie\"\nimport {useHistory} from \"react-router-dom\"\nimport {rootRoutes} from \"../route/routes\"\nimport {useIntl} from 'react-intl';\n\nconst Header = (): ReactElement =>{\n  const intl = useIntl().messages\n  const history=useHistory()\n  const [isLoggedIn, setLoggedIn] = useState<boolean>(false)\n  const [isButtonVisible, setButtonVisible] = useState<boolean>(false)\n\n\n  useEffect(() => {\n    const id= Cookies.get(\"userId\")\n    const name = Cookies.get(\"userName\")\n    if(name && id){\n      history.push(rootRoutes.chat)\n      setLoggedIn(true)\n    }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    setButtonVisible(!window.location.href.includes(rootRoutes.login))\n  }, [])\n\n  const logout =():void=>{\n    Cookies.remove(\"userId\")\n    Cookies.remove(\"userName\")\n    Cookies.remove(\"token\")\n    history.push(rootRoutes.login)\n    setLoggedIn(false)\n  }\n\n  const login =():void =>{\n    setLoggedIn(true)\n    history.push(rootRoutes.login)\n  }\n\n  return (\n    <Box width=\"100vw\" height=\"50px\" bgcolor=\"#3f51b5\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n\n      <Box width=\"50vw\" display=\"flex\" justifyContent=\"flex-start\" marginLeft=\"10px\" fontSize=\"32px\" color=\"white\" fontWeight=\"500\" > {`${intl.webChat}`} </Box>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\" width=\"50vw\">\n\n        {isButtonVisible && (\n        <Box bgcolor=\"white\"  borderRadius=\"10px\" margin=\"10px\" height=\"35px\" textAlign=\"center\">\n          <Button  onClick={isLoggedIn ? logout : login} color=\"primary\">{isLoggedIn ? `${intl.signOut}` : `${intl.signIn}`}</Button>\n        </Box>\n        )}\n\n      </Box>\n    </Box>\n  )\n}\n\nexport default Header\n","import React, {useState} from 'react';\n\nimport {BrowserRouter as Router, Route, } from 'react-router-dom';\nimport {rootRoutes} from './routes'\nimport SignIn from \"../auth/auth\"\nimport SignUp from \"../auth/register\"\nimport Chat from \"../chat/chat\"\nimport Header from \"../ui/header\"\n\n\n\nconst AppRouter: React.FC=():React.ReactElement=> {\n  const [currentChat, setCurrentChat]=useState<string | null>(null)\n\n  return (\n    <Router >\n      <Route path={rootRoutes.root}>\n        <Header />\n\n      </Route>\n\n      <Route path={rootRoutes.login} exact>\n        <SignIn  />\n      </Route>\n\n      <Route path={rootRoutes.register} exact>\n        <SignUp />\n      </Route>\n\n      <Route path={rootRoutes.chat} exact>\n        <Chat currentChat={currentChat} setCurrentChat={setCurrentChat} />\n      </Route>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport Cookies from 'js-cookie';\nimport { setContext } from 'apollo-link-context';\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://18.222.35.142:80/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: () => ({\n      autorization: Cookies.get(\"token\") ? `Bearer ${Cookies.get(\"token\")}` : \"\",\n    }),\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: 'http://18.222.35.142:80/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = Cookies.get('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      autorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n});\n","export const LOCALES={\n  ENGLISH: 'en-us',\n};\n","/* eslint-disable import/no-anonymous-default-export */\nimport {LOCALES} from '../locales';\n\nexport default {\n[LOCALES.ENGLISH]:{\n\"signIn\":\"Sign in\",\n\"signUp\":\"Sign up\",\n\"signOut\":\"Sign out\",\n\"email\":\"Email\",\n\"emailLong\":\"Email address\",\n\"password\":\"Password\",\n\"name\":\"Name\",\n\"alreadyHaveAccount\":\"Already have an account? Sign in\",\n\"dontHaveAccount\":\"Don't have an account? Sign Up\",\n\"incorrectEmail\":\"Email or password entered incorrect\",\n\"webChat\":\"WebChat\",\n\"send\":\"Send\"\n}\n}\n","/* eslint-disable import/no-anonymous-default-export */\nimport en from './en-us'\n\nexport default {\n    ...en,\n}\n","import React, {Fragment} from 'react';\nimport {IntlProvider} from 'react-intl';\nimport {LOCALES} from './locales';\nimport messages from './messages';\n\ninterface Props{\n    children:React.ReactElement,\n    locale:string,\n}\n\nconst Provider:React.FC<Props> =({children, locale=LOCALES.ENGLISH},\n):React.ReactElement=>{\n  return (\n  <IntlProvider\n    locale={locale}\n    textComponent={Fragment}\n    messages={messages[locale]}\n  >\n    {children}\n  </IntlProvider>\n  )\n};\n\n\nexport default Provider;\n","import './App.css';\nimport { ApolloProvider } from \"@apollo/react-hooks\"\nimport AppRouter from \"./route/appRouter\"\nimport client from \"./apolloSetup\"\nimport React from \"react\"\nimport {I18nProvider, LOCALES} from './i18n';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client }>\n      <I18nProvider locale={LOCALES.ENGLISH}>\n      <div className=\"App\">\n        <AppRouter />\n      </div>\n      </I18nProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}