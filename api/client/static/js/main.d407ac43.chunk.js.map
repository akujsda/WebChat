{"version":3,"sources":["route/routes.ts","auth/query.ts","auth/auth.tsx","auth/register.tsx","chat/query.ts","chat/messageList.tsx","chat/sendMessage.tsx","chat/chat.tsx","ui/header.tsx","route/appRouter.tsx","apolloSetup.ts","App.tsx","reportWebVitals.js","index.js"],"names":["rootRoutes","UserSignUpM","gql","UserSignIn","initialValues","email","password","validationSchema","yup","shape","required","test","value","includes","min","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","SignIn","classes","history","useHistory","useMutation","userSignIn","userSignIpAsync","formikBag","a","errors","variables","input","values","then","response","get","Cookies","set","push","toast","error","position","POSITION","BOTTOM_RIGHT","onSubmit","console","log","component","Container","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","TextField","fullWidth","id","label","name","autoComplete","inputProps","autocomplete","onChange","emailInput","document","getElementById","setFieldValue","setEmailValue","autoFocus","type","passwordInput","setPasswordValue","Button","color","onClick","Grid","container","item","Link","href","initValues","SignUp","nameInputReference","useRef","emailInputReference","passwordInputReference","userSignUp","userSignUpAsync","xs","ref","onBlur","nameInput","setNameValue","justify","SendMessageM","GetMessagesQ","NewMessageS","StyledList","styled","ul","StyledItemList","li","MessageList","useState","messageList","setMessageList","useQuery","senderId","data","loading","useEffect","getMessages","useSubscription","subData","subLoading","list","newMessageList","newMessage","scrollTop","scrollHeight","Box","height","overflow","map","message","index","textAlign","marginLeft","senderName","text","StyledTextField","max","SendMessage","sendMessage","userName","sendMessageAsync","resetForm","sendMessageInput","setTextValue","Chat","justifyContent","bottom","Header","bgcolor","fontSize","fontWeight","border","borderRadius","remove","AppRouter","path","exact","wsLink","WebSocketLink","uri","options","reconnect","connectionParams","autorization","httpLink","HttpLink","authLink","setContext","_","headers","token","link","split","query","definition","getMainDefinition","kind","operation","concat","ApolloClient","cache","InMemoryCache","App","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d407ac43.chunk.js","sourcesContent":["export const rootRoutes = {\n  root: \"/\",\n  login: \"/login\",\n  register: \"/register\",\n  chat: \"/chat\",\n}\n","import gql from \"graphql-tag\"\n\nexport const UserSignUpM = gql`\n  mutation createUser($input: NewUser!){\n    createUser(input: $input){\n      name\n      email\n      id\n    }\n  }\n`\n\nexport const UserSignIn = gql`\n  mutation userSignIn($input: UserSignInInput!){\n    userSignIn(input: $input){\n      id\n      userName\n      token\n    }\n  }\n`\n","import React, { ReactElement, Fragment } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignIn} from \"./query\"\nimport {  useMutation } from \"@apollo/react-hooks\"\nimport { Formik, FormikProps } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\nimport get from \"lodash/get\"\nimport Cookies from \"js-cookie\"\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\ninterface SignInInput {\n  email:string\n  password:string\n}\n\nconst initialValues:SignInInput= {\n  email:\"\",\n  password:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().required().test(\"err\", \"err\", ((value): boolean => !!value && value.includes(\"@\"))),\n  password: yup.string().required().min(6),\n})\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nexport default function SignIn () {\n  const classes = useStyles();\n  const history = useHistory()\n  const [userSignIn]=useMutation<string>(UserSignIn)\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignIpAsync = async(formikBag:FormikProps<SignInInput>):Promise<void> =>{\n    if(!formikBag.errors.email && !formikBag.errors.password){\n    try {\n     await userSignIn({\n        variables: {\n          input: {\n            email: formikBag.values.email,\n            password: formikBag.values.password\n          },\n        },\n      }).then((response: any):void =>{\n         if (get(response, \"data.userSignIn\")){\n          Cookies.set(\"userId\", get(response, \"data.userSignIn.id\"))\n          Cookies.set(\"userName\", get(response, \"data.userSignIn.userName\"))\n          Cookies.set(\"token\", get(response, \"data.userSignIn.token\"))\n          history.push(rootRoutes.chat)\n         }else{\n          toast.error(\"Email or password entered incorrect\", {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n         }\n        })\n    } catch {}\n  }else{\n    toast.error(\"Email or password entered incorrect\", {\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n  }\n  }\n\n  return (\n    <Fragment>\n    <Formik\n    onSubmit={(values):void => console.log(values)}\n    initialValues={initialValues}\n    validationSchema={validationSchema}\n    component={(\n      formikBag\n    ): ReactElement<FormikProps<SignInInput>> =>{\n      return(\n        <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete= \"new-password\"\n              inputProps={{\n                form: {\n                  autocomplete: 'off',\n                },\n              }}\n              onChange={():void=>setEmailValue(formikBag)}\n              autoFocus\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              onChange={():void=>setPasswordValue(formikBag)}\n              autoComplete= \"new-password\"\n            />\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              onClick={():Promise<void>=> userSignIpAsync(formikBag)}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item>\n                <Link href={rootRoutes.register} variant=\"body2\">\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n      </Container>\n      )\n    }}\n    />\n    <ToastContainer />\n    </Fragment>\n  );\n}\n","import React, { ReactElement, useRef } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport {rootRoutes} from '../route/routes'\nimport {UserSignUpM} from './query'\nimport { useMutation } from \"@apollo/react-hooks\"\nimport {User} from './types'\nimport { Formik, FormikProps, Form } from \"formik\"\nimport * as yup from \"yup\";\nimport {useHistory} from \"react-router-dom\"\n\ninterface CreateAccountInput {\n  email: string\n  password: string\n  name: string\n}\n\nconst initValues: CreateAccountInput = {\n  email:\"\",\n  password:\"\",\n  name:\"\"\n}\n\n\n const validationSchema = yup.object().shape({\n  email: yup.string().required(),\n  password: yup.string().required().min(6),\n  name: yup.string().required()\n})\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n  const nameInputReference= useRef<HTMLInputElement | null>(null)\n  const emailInputReference= useRef<HTMLInputElement | null>(null)\n  const passwordInputReference= useRef<HTMLInputElement | null>(null)\n  const [userSignUp]=useMutation<User>(UserSignUpM)\n  const history =useHistory()\n\n  const setNameValue = (formikBag:any): void=>{\n    const nameInput:any = document.getElementById(\"name\")\n    if(nameInput ){\n      formikBag.setFieldValue(\"name\", nameInput.value)\n      console.log(nameInput.value);\n\n    }\n\n  }\n\n  const setPasswordValue = (formikBag:any): void=>{\n    const passwordInput:any = document.getElementById(\"password\")\n    if(passwordInput){\n    formikBag.setFieldValue(\"password\", passwordInput.value)\n    }\n  }\n\n  const setEmailValue = (formikBag:any): void=>{\n    const emailInput:any = document.getElementById(\"email\")\n    if(emailInput){\n    formikBag.setFieldValue(\"email\", emailInput.value)\n    }\n  }\n\n  const  userSignUpAsync = async(values:CreateAccountInput):Promise<void> =>{\n    try {\n     await userSignUp({\n        variables: {\n          input: {\n            email: values.email,\n            name: values.name,\n            password: values.password\n          },\n        },\n      })\n    } catch {}\n    finally{\n      history.push(rootRoutes.login)\n    }\n  }\n\n\n  return (\n    <Formik\n      onSubmit={userSignUpAsync}\n      initialValues={initValues}\n      validationSchema={validationSchema}\n      component={(\n        formikBag: FormikProps<CreateAccountInput>\n    ): ReactElement<FormikProps<CreateAccountInput>> =>{\n      return(\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Form id=\"test\" className={classes.form}  >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Name\"\n                autoFocus\n                ref={nameInputReference}\n                onBlur={():void=>setNameValue(formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                ref={emailInputReference}\n                onBlur={():void=>setEmailValue(formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                ref={passwordInputReference}\n                onBlur={():void=>setPasswordValue( formikBag)}\n                autoComplete= \"new-password\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={():Promise<void> => userSignUpAsync(formikBag.values)}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href={rootRoutes.login} variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </Form>\n      </div>\n    </Container>\n      )\n    }}\n    />\n\n  );\n}\n","import gql from \"graphql-tag\"\n\n\nexport const SendMessageM = gql`\n  mutation sendMessage($input: NewMessage!){\n    sendMessage(input: $input){\n      text\n    }\n  }\n`\n\nexport const GetMessagesQ = gql`\n  query getMessages($senderId: String){\n    getMessages(senderId: $senderId){\n      text\n      senderName\n      date\n    }\n  }\n`\n\nexport const NewMessageS = gql`\n  subscription{\n    newMessage {\n    text\n    date\n    senderName\n  }\n  }\n\n`\n","import React, { ReactElement, useEffect, useState } from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport { useQuery, useSubscription } from \"@apollo/react-hooks\"\nimport {GetMessagesQ, NewMessageS} from \"./query\"\nimport Cookies from \"js-cookie\"\nimport styled from 'styled-components'\n\n\nconst StyledList= styled.ul`\n  padding-left:10px;\n  padding-right:10px;\n  list-style:none;\n`\n\nconst StyledItemList= styled.li`\n  padding-bottom: 10px;\n  padding-top: 10px;\n  border: 1px solid rgb(63, 81, 181);\n  border-radius: 10px;\n  margin-top:10px;\n  margin-bottom:10px;\n`\n\n\n\nexport const MessageList = ():ReactElement =>{\n  const id = Cookies.get(\"userId\")\n  const [messageList, setMessageList]= useState([\"\"])\n  const { data, loading } = useQuery(GetMessagesQ, {\n    variables: {\n      senderId: id\n    },\n  })\n\n  useEffect(() => {\n\n    setMessageList(data.getMessages)\n  }, [loading, data])\n\n  const {data: subData, loading: subLoading} = useSubscription(NewMessageS)\n\n\n\n  useEffect(() => {\n    const list = document.getElementById(\"messageList\")\n    if(!!subData && list ){\n\n      const newMessageList= [...messageList, subData.newMessage]\n\n      setMessageList(newMessageList)\n      list.scrollTop = list.scrollHeight\n    }\n\n  }, [subLoading, subData])\n\n\n\n\n  return (\n    <Box width=\"100vw\" height=\"70vh\" id=\"messageList\" overflow=\"scroll\">\n      <StyledList >\n        {!loading && messageList  && messageList.map((message:any, index:number)=> <StyledItemList key={index} >\n          <Box textAlign=\"left\" marginLeft=\"10px\">{message.senderName}: </Box>\n          <Box marginTop=\"20px\" >{message.text}</Box>\n        </StyledItemList>\n        )}\n      </StyledList>\n    </Box>\n  )\n}\n","import React, { ReactElement, Fragment } from \"react\"\nimport {TextField, Box, Button} from \"@material-ui/core\"\nimport {  useMutation } from \"@apollo/react-hooks\"\nimport {SendMessageM} from \"./query\"\nimport {Message} from \"./types\"\nimport {Formik, FormikProps} from \"formik\"\nimport * as yup from 'yup'\nimport Cookies from \"js-cookie\"\nimport styled from 'styled-components'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ExecutionResult } from \"graphql\"\n\nconst StyledTextField=styled(TextField)`\n  width:300px;\n  border:1px solid #3f51b5;\n  border-radius:5px;\n`\n\ninterface SendMessageInput {\n  senderId: string\n  text:string\n}\n\nconst initialValues:SendMessageInput = {\n  senderId: \"\",\n  text:\"\"\n}\n\nconst validationSchema = yup.object().shape({\n  text: yup.string().required().max(500),\n  senderId: yup.string().required(),\n})\n\n\nexport const SendMessage = ():ReactElement =>{\n  const [sendMessage] = useMutation<Message>(SendMessageM)\n  const id= Cookies.get(\"userId\")\n  const userName= Cookies.get(\"userName\")\n\n\n\n\n  const setTextValue = (formikBag:any): void=>{\n    const sendMessageInput:any = document.getElementById(\"sendMessageInput\")\n    if(sendMessageInput){\n    formikBag.setFieldValue(\"text\", sendMessageInput.value)\n    }\n  }\n\n\n  const  sendMessageAsync = async(formikBag:FormikProps<SendMessageInput>):Promise<void> =>{\n    if(formikBag.values.text && !formikBag.errors.text){\n    try {\n     await sendMessage({\n        variables: {\n          input: {\n            senderId: id,\n            text: formikBag.values.text,\n            senderName: userName\n          },\n        },\n      })\n    } catch {}\n    finally{\n      formikBag.resetForm()\n    }\n  }else{\n    toast.error(\"Max lenght 500 simbols\",{\n      position: toast.POSITION.BOTTOM_RIGHT\n    })\n    formikBag.resetForm()\n  }\n  }\n\n  return (\n    <Fragment>\n    <Formik\n    onSubmit={():Promise<ExecutionResult<Message>> =>sendMessage()}\n    initialValues={initialValues}\n    validationSchema={validationSchema}\n    component={(\n      formikBag\n    ): ReactElement<FormikProps<SendMessageInput>> =>{\n      return(\n        <Box width=\"300px\" height=\"150px\" >\n        <StyledTextField\n         id=\"sendMessageInput\" required  variant=\"outlined\"\n         autoComplete=\"off\"\n         onChange={():void=> setTextValue(formikBag)}\n         inputProps={{\n           autoComplete:\"none\"\n         }}\n          />\n\n        <Box marginTop=\"10px\" >\n          <Button  variant=\"contained\" color=\"primary\" onClick={():Promise<void>=> sendMessageAsync(formikBag)} >send </Button>\n        </Box>\n\n\n      </Box>\n)\n}}\n/>\n<ToastContainer />\n</Fragment>\n  )}\n","import React, { ReactElement, useEffect } from \"react\"\nimport {Box} from \"@material-ui/core\"\nimport {MessageList} from \"./messageList\"\nimport {SendMessage} from \"./sendMessage\"\nimport Cookies from \"js-cookie\"\nimport {useHistory} from \"react-router-dom\"\nimport {rootRoutes} from \"../route/routes\"\n\n\nconst Chat = ():ReactElement =>{\n  const id= Cookies.get(\"userId\")\n  const history = useHistory()\n\n  useEffect(() => {\n    !id &&\n    history.push(rootRoutes.login)\n  }, [history, id])\n\n\n\n    return (\n      <Box width=\"100vw\" height=\"90vh\" display=\"flex\" justifyContent=\"center\" >\n        <Box >\n          <MessageList />\n        </Box>\n\n        <Box  position=\"fixed\" bottom=\"0\">\n          <SendMessage />\n        </Box>\n      </Box>\n    )\n\n}\n\nexport default Chat\n","import React, { ReactElement } from 'react'\nimport {Box,  Button} from '@material-ui/core'\nimport Cookies from \"js-cookie\"\nimport {useHistory} from \"react-router-dom\"\nimport {rootRoutes} from \"../route/routes\"\n\n\nconst Header = (): ReactElement =>{\n\n  const history=useHistory()\n\n  // useEffect(() => {\n  //   const id= Cookies.get(\"userId\")\n  //   const name = Cookies.get(\"userName\")\n  //   if(name && id){\n  //     history.push(rootRoutes.chat)\n  //   }\n  // }, [history])\n\n  const logout =():void=>{\n    Cookies.remove(\"userId\")\n    Cookies.remove(\"userName\")\n     history.push(rootRoutes.login)\n\n  }\n\n  const login =():void =>{\n    history.push(rootRoutes.login)\n  }\n\n  return (\n    <Box width=\"100vw\" height=\"50px\" bgcolor=\"#3f51b5\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n\n      <Box width=\"50vw\" display=\"flex\" justifyContent=\"flex-start\" marginLeft=\"10px\" fontSize=\"32px\" color=\"white\" fontWeight=\"500\" > WebChat </Box>\n\n      <Box display=\"flex\" justifyContent=\"flex-end\" width=\"50vw\">\n      {!Cookies.get(\"userId\") ?\n        (<Box bgcolor=\"white\" border=\"1px solid white\" borderRadius=\"10px\" margin=\"5px 10px\" height=\"40px\" textAlign=\"center\">\n          <Button  onClick={login} color=\"primary\">login</Button>\n        </Box>)\n        :\n        (<Box bgcolor=\"white\" border=\"1px solid white\" borderRadius=\"10px\" margin=\"5px 10px\" height=\"40px\" textAlign=\"center\">\n          <Button  onClick={logout} color=\"primary\" >logout</Button>\n        </Box>)\n      }\n      </Box>\n    </Box>\n  )\n}\n\nexport default Header\n","import React, {useState} from 'react';\n\nimport {BrowserRouter as Router, Route, } from 'react-router-dom';\nimport {rootRoutes} from './routes'\nimport SignIn from \"../auth/auth\"\nimport SignUp from \"../auth/register\"\nimport Chat from \"../chat/chat\"\nimport Header from \"../ui/header\"\n\nconst AppRouter: React.FC=():React.ReactElement=> {\n\n  return (\n    <Router >\n      <Route path={rootRoutes.root}>\n        <Header />\n      </Route>\n\n      <Route path={rootRoutes.login} exact>\n        <SignIn  />\n      </Route>\n\n      <Route path={rootRoutes.register} exact>\n        <SignUp />\n      </Route>\n\n      <Route path={rootRoutes.chat} exact>\n        <Chat  />\n      </Route>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloClient } from 'apollo-client';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport Cookies from 'js-cookie';\nimport { setContext } from 'apollo-link-context';\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5000/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: () => ({\n      autorization: Cookies.get(\"token\") ? `Bearer ${Cookies.get(\"token\")}` : \"\",\n    }),\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:5000/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = Cookies.get('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      autorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink)\n);\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n});\n","import './App.css';\nimport { ApolloProvider } from \"@apollo/react-hooks\"\nimport AppRouter from \"./route/appRouter\"\nimport client from \"./apolloSetup\"\nimport React from \"react\"\n\nfunction App() {\n  return (\n    <ApolloProvider client={client }>\n      <div className=\"App\">\n        <AppRouter />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}